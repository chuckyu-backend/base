plugins {
    id 'org.springframework.boot' version '2.5.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "io.freefair.lombok" version "5.3.3.3"
    id 'java-library'
    id 'maven-publish'
    id 'java'
}

group = 'com.chuck'
version = '0.0.1'
sourceCompatibility = '1.8'

ext {
    queryDslVersion = '4.1.4'
//    springdocVersion = '1.5.11'
    spockVersion = '2.0-M2-groovy-3.0'
    springCloudVersion = 'Hoxton.SR11'
    set('nexusUrl', "http://192.168.5.85:8081")
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    // Starter
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation "jakarta.persistence:jakarta.persistence-api"
    //    WebFlux
//    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    //    Hateoas
//    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    //    Kafka
//    implementation 'org.springframework.kafka:spring-kafka'
    // Guava
    implementation 'com.google.guava:guava:20.0'
    // Reids
//    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // QueryDSL
    api "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jpa"
    annotationProcessor 'javax.annotation:javax.annotation-api'
    // Log4j 2
    implementation 'org.slf4j:log4j-over-slf4j'
    implementation 'org.apache.logging.log4j:log4j-api'
    implementation 'org.apache.logging.log4j:log4j-core'
    // Test
    implementation 'org.hamcrest:hamcrest:2.2'
    testImplementation('org.powermock:powermock-module-junit4:1.5') {
        exclude group: 'org.hamcrest'
    }
//    testImplementation('org.springframework.boot:spring-boot-starter-test') {
//        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
//    }
//    testImplementation 'org.springframework.kafka:spring-kafka-test'
    // Spock test
    testImplementation "org.spockframework:spock-core:${spockVersion}"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"
// JSON-PATH
    testImplementation 'com.jayway.jsonpath:json-path'
}

java {
//    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId 'base'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "${nexusUrl}/repository/maven-releases/"
            def snapshotsRepoUrl = "${nexusUrl}/repository/maven-snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            allowInsecureProtocol = true
            credentials {
                username 'admin'
                password '1234567'
            }
        }
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
bootJar {
    enabled = false
}
jar {
    enabled = false
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}